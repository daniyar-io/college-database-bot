import psycopg2
from psycopg2 import sql

DB_CONFIG = {
    "host": "localhost",
    "database": "college_db",
    "user": "postgres", 
    "password": "2008",  
    "port": "5432"
}

def create_tables():
    conn = None
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–¥–µ–ª–æ–≤
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS departments (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            head_teacher_id INTEGER
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—á–∏—Ç–µ–ª–µ–π
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS teachers (
            id SERIAL PRIMARY KEY,
            first_name VARCHAR(50) NOT NULL,
            last_name VARCHAR(50) NOT NULL,
            email VARCHAR(100) UNIQUE,
            phone VARCHAR(20),
            department_id INTEGER REFERENCES departments(id),
            hire_date DATE
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –≥—Ä—É–ø–ø
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS groups (
            id SERIAL PRIMARY KEY,
            name VARCHAR(20) NOT NULL,
            department_id INTEGER REFERENCES departments(id),
            start_date DATE,
            end_date DATE,
            curator_id INTEGER REFERENCES teachers(id)
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS students (
            id SERIAL PRIMARY KEY,
            first_name VARCHAR(50) NOT NULL,
            last_name VARCHAR(50) NOT NULL,
            email VARCHAR(100) UNIQUE,
            phone VARCHAR(20),
            group_id INTEGER REFERENCES groups(id),
            enrollment_date DATE
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS subjects (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            department_id INTEGER REFERENCES departments(id)
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS teaching (
            id SERIAL PRIMARY KEY,
            teacher_id INTEGER REFERENCES teachers(id),
            subject_id INTEGER REFERENCES subjects(id),
            group_id INTEGER REFERENCES groups(id)
        )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ü–µ–Ω–æ–∫
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS grades (
            id SERIAL PRIMARY KEY,
            student_id INTEGER REFERENCES students(id),
            subject_id INTEGER REFERENCES subjects(id),
            grade INTEGER CHECK (grade BETWEEN 1 AND 5),
            exam_date DATE,
            teacher_id INTEGER REFERENCES teachers(id)
        )
        """)
        
        conn.commit()
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        add_test_data(cursor, conn)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    finally:
        if conn:
            cursor.close()
            conn.close()

def add_test_data(cursor, conn):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—ã
        cursor.execute("INSERT INTO departments (name) VALUES ('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ') ON CONFLICT DO NOTHING")
        cursor.execute("INSERT INTO departments (name) VALUES ('–î–∏–∑–∞–π–Ω') ON CONFLICT DO NOTHING")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("""
        INSERT INTO teachers (first_name, last_name, email, phone, department_id, hire_date) 
        VALUES 
        ('–ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤', 'ivan@college.ru', '+79991112233', 1, '2020-01-15'),
        ('–ú–∞—Ä–∏—è', '–°–∏–¥–æ—Ä–æ–≤–∞', 'maria@college.ru', '+79994445566', 2, '2019-03-20')
        ON CONFLICT DO NOTHING
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã
        cursor.execute("""
        INSERT INTO groups (name, department_id, start_date, end_date, curator_id) 
        VALUES 
        ('–ü-21', 1, '2023-09-01', '2025-06-30', 1),
        ('–î-22', 2, '2023-09-01', '2025-06-30', 2)
        ON CONFLICT DO NOTHING
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        cursor.execute("""
        INSERT INTO students (first_name, last_name, email, phone, group_id, enrollment_date) 
        VALUES 
        ('–ê–ª–µ–∫—Å–µ–π', '–ò–≤–∞–Ω–æ–≤', 'alex@mail.ru', '+79991234567', 1, '2023-09-01'),
        ('–ï–ª–µ–Ω–∞', '–°–º–∏—Ä–Ω–æ–≤–∞', 'elena@mail.ru', '+79992345678', 1, '2023-09-01'),
        ('–î–º–∏—Ç—Ä–∏–π', '–ö–æ–∑–ª–æ–≤', 'dmitry@mail.ru', '+79993456789', 2, '2023-09-01')
        ON CONFLICT DO NOTHING
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        cursor.execute("""
        INSERT INTO subjects (name, department_id) 
        VALUES 
        ('Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 1),
        ('–í–µ–±-–¥–∏–∑–∞–π–Ω', 2),
        ('–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 1)
        ON CONFLICT DO NOTHING
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏
        cursor.execute("""
        INSERT INTO grades (student_id, subject_id, grade, teacher_id, exam_date) 
        VALUES 
        (1, 1, 5, 1, '2024-01-20'),
        (1, 3, 4, 1, '2024-01-25'),
        (2, 1, 5, 1, '2024-01-20'),
        (3, 2, 5, 2, '2024-01-22')
        ON CONFLICT DO NOTHING
        """)
        
        conn.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    create_tables()